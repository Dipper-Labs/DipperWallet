syntax = "proto3";

package termdeposit;

import "codec.proto";
import "coin/codec.proto";

// DepositContract is an entity created in order to allow investment deposits.
// Anyone can deposit funds and therefore sign a deposit contract in order to
// lock funds and receive appropriate interest after the contract expires.
message DepositContract {
  weave.Metadata metadata = 1;
  // Valid since defines the beginning of when the contract is active.
  int64 valid_since = 2 ;
  // An expiration date for this deposit contract. After this deadline, all
  // depositor funds are released and deposit contract is no longer active.
  int64 valid_until = 3 ;
}

// Deposit represents a single fund deposition. Deposited funds are locked
// until the contract expiration.
message Deposit {
  weave.Metadata metadata = 1;
  // Deposit contract ID that this funds allocation was made with.
  bytes deposit_contract_id = 2 ;
  // Total amount that was deposited within a contract. Must be IOV tokens.
  // This information is used when computing each depositor reward. It is used
  // instead of looking at the actual wallet state, so that it is not possible
  // to increase the value of a deposit wallet only shortly before the
  // computation.
  coin.Coin amount = 3 ;
  // Pro-rated interest rate as detailed in the Confluence spec.
  weave.Fraction rate = 4 ;
  // Payback is an address that locked funds and interest are send back to once
  // the contract expires.
  bytes depositor = 5 ;
  // Released flag is used to determin whether the funds locked by this deposit
  // were already released or not.
  bool released = 6;
  // CreatedAt is set to the wall clock value at the deposit creation time.
  int64 created_at = 7 ;
}

// Configuration is a dynamic configuration used by this extension, managed by
// the functionality provided by gconf package.
message Configuration {
  weave.Metadata metadata = 1;
  // Owner is present to implement gconf.OwnedConfig interface. Owner is
  // allowed to update the configuration.
  bytes owner = 2 ;
  // Admin is an address that is able to create deposit contracts.
  bytes admin = 3 ;
  // A list of bonus values applied to each created Deposit instance.
  repeated DepositBonus bonuses = 4 ;
  // Base rates defines a list of addresses that have their q-score value fixed.
  repeated CustomRate base_rates = 5 ;
}

// Custom Rate allows to declare a fixed rate value for an address.
message CustomRate {
  bytes address = 1 ;
  weave.Fraction rate = 2 ;
}

// DepositBonus defines a bonus value used to calculate deposit rate. The
// longer the deposit period, the higher the deposit bonus should be.
message DepositBonus {
  // Deposit minimal lockin period required to use this bonus.
  int32 lockin_period = 1 ;
  // Bonus rate for given range.
  weave.Fraction bonus = 2 ;
}

// CreateDepositContractMsg creates a new DepositContract entity. This message
// must be signed by the admin as configured via the Configuration entity.
message CreateDepositContractMsg {
  weave.Metadata metadata = 1;
  // An activation date for the newly created deposit contract.
  int64 valid_since = 2 ;
  // An expiration date for the newly created deposit contract.
  int64 valid_until = 3 ;
}

// DepositMsg can be send by anyone to deposit funds within a non expired
// contract. Funds will stay locked until that contract expiration date.
message DepositMsg {
  weave.Metadata metadata = 1;
  // Deposit contract ID that this funds allocation was made with. Contract
  // must not be expired.
  bytes deposit_contract_id = 2 ;
  // Total amount that was deposited within a contract. Must be IOV tokens.
  coin.Coin amount = 3 ;
  // Payback is an address that locked funds and interest are send back to once
  // the contract expires.
  bytes depositor = 4 ;
}

// ReleaseDepositMsg cause releasing of all funds allocated within given
// deposit. Related contract must be expired. Anyone can submit this message.
message ReleaseDepositMsg {
  weave.Metadata metadata = 1;
  // ID of the deposit that is to be released.
  bytes deposit_id = 2 ;
}

message UpdateConfigurationMsg {
  weave.Metadata metadata = 1;
  Configuration patch = 2;
}
