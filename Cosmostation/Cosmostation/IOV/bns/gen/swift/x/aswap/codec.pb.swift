// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/aswap/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Swap is designed to hold some coins for atomic swap, locked by preimage_hash
struct Aswap_Swap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metadata is used for schema versioning support
  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// sha256 hash of preimage, 32 bytes long
  var preimageHash: Data {
    get {return _storage._preimageHash}
    set {_uniqueStorage()._preimageHash = newValue}
  }

  /// source is a sender address
  var source: Data {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// destination is an address of destination
  var destination: Data {
    get {return _storage._destination}
    set {_uniqueStorage()._destination = newValue}
  }

  /// If unreleased before timeout, swap will return coins to source.
  /// Timeout represents wall clock time as read from the block header. Timeout
  /// is represented using POSIX time format.
  /// Expiration time is inclusive meaning that the swap expires as soon as
  /// the current time is equal or greater than timeout value.
  /// nonexpired: ;
  /// max length 128 characters
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  /// Address of this entity. Set during creation and does not change.
  var address: Data {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CreateMsg creates a Swap with some coins.
struct Aswap_CreateMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var source: Data {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// sha256 hash of preimage, 32 bytes long
  var preimageHash: Data {
    get {return _storage._preimageHash}
    set {_uniqueStorage()._preimageHash = newValue}
  }

  var destination: Data {
    get {return _storage._destination}
    set {_uniqueStorage()._destination = newValue}
  }

  /// amount may contain multiple token types
  var amount: [Coin_Coin] {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  /// Timeout represents wall clock time.
  var timeout: Int64 {
    get {return _storage._timeout}
    set {_uniqueStorage()._timeout = newValue}
  }

  /// max length 128 character
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ReleaseMsg releases the tokens to the destination.
/// This operation is authorized by preimage, which is sent raw and then hashed on the backend.
struct Aswap_ReleaseMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// swap_id to release
  var swapID: Data {
    get {return _storage._swapID}
    set {_uniqueStorage()._swapID = newValue}
  }

  /// raw preimage to unlock swap, also helpful to retrieve the swap by it's hashed version
  /// must be exactly 32 bytes long
  var preimage: Data {
    get {return _storage._preimage}
    set {_uniqueStorage()._preimage = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ReturnMsg releases the tokens to the source.
/// This operation only works if the Swap is expired.
struct Aswap_ReturnMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// swap_id to return
  var swapID: Data {
    get {return _storage._swapID}
    set {_uniqueStorage()._swapID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "aswap"

extension Aswap_Swap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Swap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "preimage_hash"),
    3: .same(proto: "source"),
    5: .same(proto: "destination"),
    7: .same(proto: "memo"),
    8: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _preimageHash: Data = SwiftProtobuf.Internal.emptyData
    var _source: Data = SwiftProtobuf.Internal.emptyData
    var _destination: Data = SwiftProtobuf.Internal.emptyData
    var _memo: String = String()
    var _address: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _preimageHash = source._preimageHash
      _source = source._source
      _destination = source._destination
      _memo = source._memo
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._preimageHash)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._source)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._destination)
        case 7: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._preimageHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._preimageHash, fieldNumber: 2)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._source, fieldNumber: 3)
      }
      if !_storage._destination.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._destination, fieldNumber: 5)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 7)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._address, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aswap_Swap, rhs: Aswap_Swap) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._preimageHash != rhs_storage._preimageHash {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._address != rhs_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aswap_CreateMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "source"),
    3: .standard(proto: "preimage_hash"),
    4: .same(proto: "destination"),
    5: .same(proto: "amount"),
    6: .same(proto: "timeout"),
    7: .same(proto: "memo"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _source: Data = SwiftProtobuf.Internal.emptyData
    var _preimageHash: Data = SwiftProtobuf.Internal.emptyData
    var _destination: Data = SwiftProtobuf.Internal.emptyData
    var _amount: [Coin_Coin] = []
    var _timeout: Int64 = 0
    var _memo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _source = source._source
      _preimageHash = source._preimageHash
      _destination = source._destination
      _amount = source._amount
      _timeout = source._timeout
      _memo = source._memo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._source)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._preimageHash)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._destination)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._amount)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._timeout)
        case 7: try decoder.decodeSingularStringField(value: &_storage._memo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._source, fieldNumber: 2)
      }
      if !_storage._preimageHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._preimageHash, fieldNumber: 3)
      }
      if !_storage._destination.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._destination, fieldNumber: 4)
      }
      if !_storage._amount.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._amount, fieldNumber: 5)
      }
      if _storage._timeout != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeout, fieldNumber: 6)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aswap_CreateMsg, rhs: Aswap_CreateMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._preimageHash != rhs_storage._preimageHash {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._timeout != rhs_storage._timeout {return false}
        if _storage._memo != rhs_storage._memo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aswap_ReleaseMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReleaseMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "swap_id"),
    3: .same(proto: "preimage"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _swapID: Data = SwiftProtobuf.Internal.emptyData
    var _preimage: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _swapID = source._swapID
      _preimage = source._preimage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._swapID)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._preimage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._swapID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._swapID, fieldNumber: 2)
      }
      if !_storage._preimage.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._preimage, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aswap_ReleaseMsg, rhs: Aswap_ReleaseMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._swapID != rhs_storage._swapID {return false}
        if _storage._preimage != rhs_storage._preimage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aswap_ReturnMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReturnMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "swap_id"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _swapID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _swapID = source._swapID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._swapID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._swapID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._swapID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aswap_ReturnMsg, rhs: Aswap_ReturnMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._swapID != rhs_storage._swapID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
