// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/cron/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TaskResult is a publicly available information about task execution result.
/// It is only created for those tasks that were executed.
///
/// Due to a bug in tendermint we must store this information ourselves instead
/// of relying on the usual search via tag.
/// https://github.com/tendermint/tendermint/issues/3665
struct Cron_TaskResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Successful is set to true if the task was successfully executed.
  var successful: Bool {
    get {return _storage._successful}
    set {_uniqueStorage()._successful = newValue}
  }

  /// Info contains any additinal information that might be useful to lean more
  /// about the task execution.
  var info: String {
    get {return _storage._info}
    set {_uniqueStorage()._info = newValue}
  }

  /// Exec time hold the information of when the task was executed.
  var execTime: Int64 {
    get {return _storage._execTime}
    set {_uniqueStorage()._execTime = newValue}
  }

  /// Exec height holds the block height value at the time the task was executed.
  var execHeight: Int64 {
    get {return _storage._execHeight}
    set {_uniqueStorage()._execHeight = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cron"

extension Cron_TaskResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "successful"),
    3: .same(proto: "info"),
    4: .standard(proto: "exec_time"),
    5: .standard(proto: "exec_height"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _successful: Bool = false
    var _info: String = String()
    var _execTime: Int64 = 0
    var _execHeight: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _successful = source._successful
      _info = source._info
      _execTime = source._execTime
      _execHeight = source._execHeight
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._successful)
        case 3: try decoder.decodeSingularStringField(value: &_storage._info)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._execTime)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._execHeight)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._successful != false {
        try visitor.visitSingularBoolField(value: _storage._successful, fieldNumber: 2)
      }
      if !_storage._info.isEmpty {
        try visitor.visitSingularStringField(value: _storage._info, fieldNumber: 3)
      }
      if _storage._execTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._execTime, fieldNumber: 4)
      }
      if _storage._execHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._execHeight, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cron_TaskResult, rhs: Cron_TaskResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._successful != rhs_storage._successful {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._execTime != rhs_storage._execTime {return false}
        if _storage._execHeight != rhs_storage._execHeight {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
