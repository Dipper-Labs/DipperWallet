// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/paychan/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// PaymentChannel holds the state of a payment channel during its lifetime.
struct Paychan_PaymentChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Source is the source that the founds are allocated from.
  var source: Data {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// Source public key is a key that must be used to verify signature of
  /// transfer message. Source creates signed transfer messages and gives them
  /// to the destination. Signature prevents from altering transfer message.
  var sourcePubkey: Crypto_PublicKey {
    get {return _storage._sourcePubkey ?? Crypto_PublicKey()}
    set {_uniqueStorage()._sourcePubkey = newValue}
  }
  /// Returns true if `sourcePubkey` has been explicitly set.
  var hasSourcePubkey: Bool {return _storage._sourcePubkey != nil}
  /// Clears the value of `sourcePubkey`. Subsequent reads from it will return its default value.
  mutating func clearSourcePubkey() {_uniqueStorage()._sourcePubkey = nil}

  /// Destination is the party that receives payments through this channel
  var destination: Data {
    get {return _storage._destination}
    set {_uniqueStorage()._destination = newValue}
  }

  /// Total represents a maximum value that can be transferred via this
  /// payment channel.
  var total: Coin_Coin {
    get {return _storage._total ?? Coin_Coin()}
    set {_uniqueStorage()._total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return _storage._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {_uniqueStorage()._total = nil}

  /// Timeout represents wall clock time as read from the block header. Timeout
  /// is represented using POSIX time format.
  /// Expiration time is inclusive meaning that the paychan expires as soon as
  /// the current time is equal or greater than timeout value.
  /// nonexpired: ;
  /// Max length 128 character.
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  /// Transferred represents total amount that was transferred using allocated
  /// (total) value. Transferred must never exceed total value.
  var transferred: Coin_Coin {
    get {return _storage._transferred ?? Coin_Coin()}
    set {_uniqueStorage()._transferred = newValue}
  }
  /// Returns true if `transferred` has been explicitly set.
  var hasTransferred: Bool {return _storage._transferred != nil}
  /// Clears the value of `transferred`. Subsequent reads from it will return its default value.
  mutating func clearTransferred() {_uniqueStorage()._transferred = nil}

  /// Address of this entity. Set during creation and does not change.
  var address: Data {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CreateMsg creates a new payment channel that can be used to
/// transfer value between two parties.
///
/// Total amount will be taken from the sources account and allocated for user
/// in the transactions done via created payment channel.
struct Paychan_CreateMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Source address (weave.Address).
  var source: Data {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// Source public key is for validating transfer message signature.
  var sourcePubkey: Crypto_PublicKey {
    get {return _storage._sourcePubkey ?? Crypto_PublicKey()}
    set {_uniqueStorage()._sourcePubkey = newValue}
  }
  /// Returns true if `sourcePubkey` has been explicitly set.
  var hasSourcePubkey: Bool {return _storage._sourcePubkey != nil}
  /// Clears the value of `sourcePubkey`. Subsequent reads from it will return its default value.
  mutating func clearSourcePubkey() {_uniqueStorage()._sourcePubkey = nil}

  /// Destination address  (weave.Address).
  var destination: Data {
    get {return _storage._destination}
    set {_uniqueStorage()._destination = newValue}
  }

  /// Maximum amount that can be transferred via this channel.
  var total: Coin_Coin {
    get {return _storage._total ?? Coin_Coin()}
    set {_uniqueStorage()._total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return _storage._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {_uniqueStorage()._total = nil}

  /// If reached, channel can be closed by anyone.
  var timeout: Int64 {
    get {return _storage._timeout}
    set {_uniqueStorage()._timeout = newValue}
  }

  /// Max length 128 character.
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Payment is created by the source. Source should give the message to the
/// destination, so that it can be redeemed at any time.
///
/// Each Payment should be created with amount greater than the previous one.
struct Paychan_Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var channelID: Data {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  var amount: Coin_Coin {
    get {return _storage._amount ?? Coin_Coin()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  /// Max length 128 character.
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TransferMsg binds Payment with a signature created using
/// sources private key.
/// Signature is there to ensure that payment message was not altered.
struct Paychan_TransferMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var payment: Paychan_Payment {
    get {return _storage._payment ?? Paychan_Payment()}
    set {_uniqueStorage()._payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  var hasPayment: Bool {return _storage._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  mutating func clearPayment() {_uniqueStorage()._payment = nil}

  var signature: Crypto_Signature {
    get {return _storage._signature ?? Crypto_Signature()}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {_uniqueStorage()._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CloseMsg close a payment channel and release remaining founds
/// by sending them back to the source account.
///
/// Destination account can close channel at any moment.
///
/// Source can close channel only if the timeout was reached.
struct Paychan_CloseMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var channelID: Data {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  /// Max length 128 character.
  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "paychan"

extension Paychan_PaymentChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "source"),
    3: .standard(proto: "source_pubkey"),
    4: .same(proto: "destination"),
    5: .same(proto: "total"),
    7: .same(proto: "memo"),
    8: .same(proto: "transferred"),
    9: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _source: Data = SwiftProtobuf.Internal.emptyData
    var _sourcePubkey: Crypto_PublicKey? = nil
    var _destination: Data = SwiftProtobuf.Internal.emptyData
    var _total: Coin_Coin? = nil
    var _memo: String = String()
    var _transferred: Coin_Coin? = nil
    var _address: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _source = source._source
      _sourcePubkey = source._sourcePubkey
      _destination = source._destination
      _total = source._total
      _memo = source._memo
      _transferred = source._transferred
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._source)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sourcePubkey)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._destination)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._total)
        case 7: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._transferred)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._source, fieldNumber: 2)
      }
      if let v = _storage._sourcePubkey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._destination.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._destination, fieldNumber: 4)
      }
      if let v = _storage._total {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 7)
      }
      if let v = _storage._transferred {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._address, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Paychan_PaymentChannel, rhs: Paychan_PaymentChannel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._sourcePubkey != rhs_storage._sourcePubkey {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._total != rhs_storage._total {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._transferred != rhs_storage._transferred {return false}
        if _storage._address != rhs_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Paychan_CreateMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "source"),
    3: .standard(proto: "source_pubkey"),
    4: .same(proto: "destination"),
    5: .same(proto: "total"),
    6: .same(proto: "timeout"),
    7: .same(proto: "memo"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _source: Data = SwiftProtobuf.Internal.emptyData
    var _sourcePubkey: Crypto_PublicKey? = nil
    var _destination: Data = SwiftProtobuf.Internal.emptyData
    var _total: Coin_Coin? = nil
    var _timeout: Int64 = 0
    var _memo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _source = source._source
      _sourcePubkey = source._sourcePubkey
      _destination = source._destination
      _total = source._total
      _timeout = source._timeout
      _memo = source._memo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._source)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sourcePubkey)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._destination)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._total)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._timeout)
        case 7: try decoder.decodeSingularStringField(value: &_storage._memo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._source, fieldNumber: 2)
      }
      if let v = _storage._sourcePubkey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._destination.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._destination, fieldNumber: 4)
      }
      if let v = _storage._total {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._timeout != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeout, fieldNumber: 6)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Paychan_CreateMsg, rhs: Paychan_CreateMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._sourcePubkey != rhs_storage._sourcePubkey {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._total != rhs_storage._total {return false}
        if _storage._timeout != rhs_storage._timeout {return false}
        if _storage._memo != rhs_storage._memo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Paychan_Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Payment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "channel_id"),
    3: .same(proto: "amount"),
    4: .same(proto: "memo"),
  ]

  fileprivate class _StorageClass {
    var _chainID: String = String()
    var _channelID: Data = SwiftProtobuf.Internal.emptyData
    var _amount: Coin_Coin? = nil
    var _memo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _channelID = source._channelID
      _amount = source._amount
      _memo = source._memo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._channelID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._memo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._channelID, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Paychan_Payment, rhs: Paychan_Payment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._memo != rhs_storage._memo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Paychan_TransferMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "payment"),
    3: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _payment: Paychan_Payment? = nil
    var _signature: Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _payment = source._payment
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._payment)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Paychan_TransferMsg, rhs: Paychan_TransferMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._payment != rhs_storage._payment {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Paychan_CloseMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CloseMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "channel_id"),
    3: .same(proto: "memo"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _channelID: Data = SwiftProtobuf.Internal.emptyData
    var _memo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _channelID = source._channelID
      _memo = source._memo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._channelID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._memo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._channelID, fieldNumber: 2)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Paychan_CloseMsg, rhs: Paychan_CloseMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._memo != rhs_storage._memo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
