// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/gov/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VoteOptions define possible values for a vote including the INVALID default.
enum Gov_VoteOption: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case invalid // = 0
  case yes // = 1
  case no // = 2
  case abstain // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .invalid
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .yes
    case 2: self = .no
    case 3: self = .abstain
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .yes: return 1
    case .no: return 2
    case .abstain: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gov_VoteOption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gov_VoteOption] = [
    .invalid,
    .yes,
    .no,
    .abstain,
  ]
}

#endif  // swift(>=4.2)

/// Electorate defines who may vote in an election. This same group can be used in many elections
/// and is stored for re-use
struct Gov_Electorate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Document version
  var version: UInt32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Admin is the address that is allowed ot modify an existing electorate.
  var admin: Data {
    get {return _storage._admin}
    set {_uniqueStorage()._admin = newValue}
  }

  /// Human readable title.
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Elector defines a list of all signatures that are allowed to participate in a vote
  var electors: [Gov_Elector] {
    get {return _storage._electors}
    set {_uniqueStorage()._electors = newValue}
  }

  /// TotalElectorateWeight is the sum of all electors weights.
  var totalElectorateWeight: UInt64 {
    get {return _storage._totalElectorateWeight}
    set {_uniqueStorage()._totalElectorateWeight = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Elector clubs together a address with a weight. The greater the weight
/// the greater the power of a participant.
struct Gov_Elector {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The address of the voter.
  var address: Data = SwiftProtobuf.Internal.emptyData

  /// Weight defines the power of the participants vote. max value is 65535 (2^16-1).
  var weight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Election Rule defines how an election is run. A proposal must be voted upon via a pre-defined ruleset.
struct Gov_ElectionRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Document version.
  var version: UInt32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Admin is the address that is allowed to modify an existing election rule.
  var admin: Data {
    get {return _storage._admin}
    set {_uniqueStorage()._admin = newValue}
  }

  /// ElectorateID references the electorate using this rule (without version, as changing electorate changes the rule).
  var electorateID: Data {
    get {return _storage._electorateID}
    set {_uniqueStorage()._electorateID = newValue}
  }

  /// Human readable title.
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Duration in seconds of how long the voting period will take place.
  var votingPeriod: UInt32 {
    get {return _storage._votingPeriod}
    set {_uniqueStorage()._votingPeriod = newValue}
  }

  /// Threshold is the fraction of either all eligible voters or in case of a quorum setup the fraction of all non
  /// abstained votes.
  /// To accept a proposal this value must be exceeded with Yes votes.
  /// The formula applied is:
  /// (yes * denominator) > (base * numerator) with base total electorate weight or Yes/No votes in case of quorum set
  ///
  /// The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  /// of the eligible voters.
  var threshold: Gov_Fraction {
    get {return _storage._threshold ?? Gov_Fraction()}
    set {_uniqueStorage()._threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  var hasThreshold: Bool {return _storage._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  mutating func clearThreshold() {_uniqueStorage()._threshold = nil}

  /// The quorum fraction of eligible voters is based on the total electorate weight and defines a threshold of
  /// votes that must be exceeded before the acceptance threshold is applied.
  /// This value requires any kind of votes and not only YES.
  ///
  /// The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  /// of the eligible voters.
  var quorum: Gov_Fraction {
    get {return _storage._quorum ?? Gov_Fraction()}
    set {_uniqueStorage()._quorum = newValue}
  }
  /// Returns true if `quorum` has been explicitly set.
  var hasQuorum: Bool {return _storage._quorum != nil}
  /// Clears the value of `quorum`. Subsequent reads from it will return its default value.
  mutating func clearQuorum() {_uniqueStorage()._quorum = nil}

  /// Address of this entity. Set during creation and does not change.
  var address: Data {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The Fraction type represents a numerator and denominator to enable higher precision thresholds in
/// the election rules. For example:
/// numerator: 1, denominator: 2 => > 50%
/// numerator: 2, denominator: 3 => > 66.666..%
/// numerator: 6273, denominator: 10000 => > 62.73%
/// Valid range of the fraction is 0.5 to 1.
struct Gov_Fraction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The top number in a fraction.
  var numerator: UInt32 = 0

  /// The bottom number
  var denominator: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A generic proposal for an on-chain governance process.
/// Most fields control the whole election process.
/// raw_option contains an transaction to be executed by the governance vote in case of success
/// (what is being voted on)
struct Gov_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Human readable title.
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Content of the proposal. Protobuf encoded, app-specific decoded must be passed in constructor
  var rawOption: Data {
    get {return _storage._rawOption}
    set {_uniqueStorage()._rawOption = newValue}
  }

  /// Description of the proposal in text form.
  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// ElectionRuleRef is a reference to the election rule
  var electionRuleRef: Orm_VersionedIDRef {
    get {return _storage._electionRuleRef ?? Orm_VersionedIDRef()}
    set {_uniqueStorage()._electionRuleRef = newValue}
  }
  /// Returns true if `electionRuleRef` has been explicitly set.
  var hasElectionRuleRef: Bool {return _storage._electionRuleRef != nil}
  /// Clears the value of `electionRuleRef`. Subsequent reads from it will return its default value.
  mutating func clearElectionRuleRef() {_uniqueStorage()._electionRuleRef = nil}

  /// Reference to the electorate to define the group of possible voters.
  var electorateRef: Orm_VersionedIDRef {
    get {return _storage._electorateRef ?? Orm_VersionedIDRef()}
    set {_uniqueStorage()._electorateRef = newValue}
  }
  /// Returns true if `electorateRef` has been explicitly set.
  var hasElectorateRef: Bool {return _storage._electorateRef != nil}
  /// Clears the value of `electorateRef`. Subsequent reads from it will return its default value.
  mutating func clearElectorateRef() {_uniqueStorage()._electorateRef = nil}

  /// Unix timestamp of the block where the voting period starts. Header time of the votes must be greater than or equal
  /// to this start time.
  var votingStartTime: Int64 {
    get {return _storage._votingStartTime}
    set {_uniqueStorage()._votingStartTime = newValue}
  }

  /// Unix timestamp of the block where the voting period ends. Header times of the votes must be before this end time
  /// to be included in the election.
  var votingEndTime: Int64 {
    get {return _storage._votingEndTime}
    set {_uniqueStorage()._votingEndTime = newValue}
  }

  /// Unix timestamp of the block where the proposal was added to the chain.
  var submissionTime: Int64 {
    get {return _storage._submissionTime}
    set {_uniqueStorage()._submissionTime = newValue}
  }

  /// Address of the author who created the proposal. If not set explicit on creation it will default to the main signer.
  var author: Data {
    get {return _storage._author}
    set {_uniqueStorage()._author = newValue}
  }

  /// Result of the election. Contains intermediate tally results while voting period is open.
  var voteState: Gov_TallyResult {
    get {return _storage._voteState ?? Gov_TallyResult()}
    set {_uniqueStorage()._voteState = newValue}
  }
  /// Returns true if `voteState` has been explicitly set.
  var hasVoteState: Bool {return _storage._voteState != nil}
  /// Clears the value of `voteState`. Subsequent reads from it will return its default value.
  mutating func clearVoteState() {_uniqueStorage()._voteState = nil}

  /// Status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
  var status: Gov_Proposal.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Result is the final result based on the votes and election rule. Initial value is Undefined.
  var result: Gov_Proposal.Result {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  /// Result is the final result based on the votes and election rule. Initial value is NotRun.
  var executorResult: Gov_Proposal.ExecutorResult {
    get {return _storage._executorResult}
    set {_uniqueStorage()._executorResult = newValue}
  }

  /// Tally task ID holds the ID of the asynchronous task that is scheduled to
  /// create the tally once the voting period is over.
  var tallyTaskID: Data {
    get {return _storage._tallyTaskID}
    set {_uniqueStorage()._tallyTaskID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// An empty value is invalid and not allowed
    case proposalStatusInvalid // = 0

    /// Initial status of a proposal when persisted.
    case proposalStatusSubmitted // = 1

    /// Final status of a proposal when the tally was executed
    case proposalStatusClosed // = 2

    /// A proposal can be deleted before the voting start time by the owner. When this happens the final status
    /// is Withdrawn.
    case proposalStatusWithdrawn // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .proposalStatusInvalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .proposalStatusInvalid
      case 1: self = .proposalStatusSubmitted
      case 2: self = .proposalStatusClosed
      case 3: self = .proposalStatusWithdrawn
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .proposalStatusInvalid: return 0
      case .proposalStatusSubmitted: return 1
      case .proposalStatusClosed: return 2
      case .proposalStatusWithdrawn: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// An empty value is invalid and not allowed
    case proposalResultInvalid // = 0

    /// Until a final tally has happened the status is undefined
    case proposalResultUndefined // = 1

    /// Final result of the tally
    case proposalResultAccepted // = 2

    /// Final result of the tally
    case proposalResultRejected // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .proposalResultInvalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .proposalResultInvalid
      case 1: self = .proposalResultUndefined
      case 2: self = .proposalResultAccepted
      case 3: self = .proposalResultRejected
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .proposalResultInvalid: return 0
      case .proposalResultUndefined: return 1
      case .proposalResultAccepted: return 2
      case .proposalResultRejected: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum ExecutorResult: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// An empty value is not allowed
    case proposalExecutorResultInvalid // = 0

    /// We have not yet run the executor
    case proposalExecutorResultNotRun // = 1

    /// The executor was successful and proposed action updated state
    case proposalExecutorResultSuccess // = 2

    /// The executor returned an error and proposed action didn't update state
    case proposalExecutorResultFailure // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .proposalExecutorResultInvalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .proposalExecutorResultInvalid
      case 1: self = .proposalExecutorResultNotRun
      case 2: self = .proposalExecutorResultSuccess
      case 3: self = .proposalExecutorResultFailure
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .proposalExecutorResultInvalid: return 0
      case .proposalExecutorResultNotRun: return 1
      case .proposalExecutorResultSuccess: return 2
      case .proposalExecutorResultFailure: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Gov_Proposal.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gov_Proposal.Status] = [
    .proposalStatusInvalid,
    .proposalStatusSubmitted,
    .proposalStatusClosed,
    .proposalStatusWithdrawn,
  ]
}

extension Gov_Proposal.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gov_Proposal.Result] = [
    .proposalResultInvalid,
    .proposalResultUndefined,
    .proposalResultAccepted,
    .proposalResultRejected,
  ]
}

extension Gov_Proposal.ExecutorResult: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gov_Proposal.ExecutorResult] = [
    .proposalExecutorResultInvalid,
    .proposalExecutorResultNotRun,
    .proposalExecutorResultSuccess,
    .proposalExecutorResultFailure,
  ]
}

#endif  // swift(>=4.2)

/// Resolution contains TextResolution and an electorate reference.
struct Gov_Resolution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var proposalID: Data {
    get {return _storage._proposalID}
    set {_uniqueStorage()._proposalID = newValue}
  }

  var electorateRef: Orm_VersionedIDRef {
    get {return _storage._electorateRef ?? Orm_VersionedIDRef()}
    set {_uniqueStorage()._electorateRef = newValue}
  }
  /// Returns true if `electorateRef` has been explicitly set.
  var hasElectorateRef: Bool {return _storage._electorateRef != nil}
  /// Clears the value of `electorateRef`. Subsequent reads from it will return its default value.
  mutating func clearElectorateRef() {_uniqueStorage()._electorateRef = nil}

  var resolution: String {
    get {return _storage._resolution}
    set {_uniqueStorage()._resolution = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TallyResult contains sums of the votes and all data for the final result.
struct Gov_TallyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// TotalYes is the sum of weights of all the voters that approved the proposal
  var totalYes: UInt64 {
    get {return _storage._totalYes}
    set {_uniqueStorage()._totalYes = newValue}
  }

  /// TotalNo is the sum of weights of all the voters that rejected the proposal
  var totalNo: UInt64 {
    get {return _storage._totalNo}
    set {_uniqueStorage()._totalNo = newValue}
  }

  /// TotalAbstain is the sum of weights of all the voters that voted abstain
  var totalAbstain: UInt64 {
    get {return _storage._totalAbstain}
    set {_uniqueStorage()._totalAbstain = newValue}
  }

  /// TotalElectorateWeight is the sum of all weights in the electorate.
  var totalElectorateWeight: UInt64 {
    get {return _storage._totalElectorateWeight}
    set {_uniqueStorage()._totalElectorateWeight = newValue}
  }

  /// Quorum when set is the fraction of the total electorate weight that must be exceeded by total votes weight.
  var quorum: Gov_Fraction {
    get {return _storage._quorum ?? Gov_Fraction()}
    set {_uniqueStorage()._quorum = newValue}
  }
  /// Returns true if `quorum` has been explicitly set.
  var hasQuorum: Bool {return _storage._quorum != nil}
  /// Clears the value of `quorum`. Subsequent reads from it will return its default value.
  mutating func clearQuorum() {_uniqueStorage()._quorum = nil}

  /// Threshold is the fraction of Yes votes of a base value that needs to be exceeded to accept the proposal.
  /// The base value is either the total electorate weight or the sum of Yes/No weights when a quorum is defined.
  var threshold: Gov_Fraction {
    get {return _storage._threshold ?? Gov_Fraction()}
    set {_uniqueStorage()._threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  var hasThreshold: Bool {return _storage._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  mutating func clearThreshold() {_uniqueStorage()._threshold = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Vote combines the elector and their voted option to archive them.
/// The proposalID and address is stored within the key.
struct Gov_Vote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Elector is who voted
  var elector: Gov_Elector {
    get {return _storage._elector ?? Gov_Elector()}
    set {_uniqueStorage()._elector = newValue}
  }
  /// Returns true if `elector` has been explicitly set.
  var hasElector: Bool {return _storage._elector != nil}
  /// Clears the value of `elector`. Subsequent reads from it will return its default value.
  mutating func clearElector() {_uniqueStorage()._elector = nil}

  /// VoteOption is what they voted
  var voted: Gov_VoteOption {
    get {return _storage._voted}
    set {_uniqueStorage()._voted = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CreateProposalMsg creates a new governance proposal.
/// Most fields control the whole election process.
/// raw_option contains an transaction to be executed by the governance vote in case of success
/// (what is being voted on)
struct Gov_CreateProposalMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Human readable title. Must match `^{4,128}$`
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// Content of the proposal. Protobuf encoded, app-specific decoded must be passed in handler constructor
  var rawOption: Data {
    get {return _storage._rawOption}
    set {_uniqueStorage()._rawOption = newValue}
  }

  /// Human readable description with 3 to 5000 chars.
  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// ElectionRuleID is a reference to the election rule
  var electionRuleID: Data {
    get {return _storage._electionRuleID}
    set {_uniqueStorage()._electionRuleID = newValue}
  }

  /// Unix timestamp when the proposal starts. Must be in the future.
  var startTime: Int64 {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  /// Author is an optional field to set the address of the author with a proposal. The author must sign the message.
  /// The author of the created proposal.
  /// Warning: This field is optional and when not set it will default to any
  /// signer. It is recommended to always explicitely set the value of this
  /// field, as the signer order is not guaranteed.
  var author: Data {
    get {return _storage._author}
    set {_uniqueStorage()._author = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DeleteProposalMsg deletes a governance proposal.
struct Gov_DeleteProposalMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// ProposalID is the unique identifier of the proposal to delete
  var proposalID: Data {
    get {return _storage._proposalID}
    set {_uniqueStorage()._proposalID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VoteMsg is the way to express a voice and participate in an election of a proposal on chain.
struct Gov_VoteMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// The unique id of the proposal.
  var proposalID: Data {
    get {return _storage._proposalID}
    set {_uniqueStorage()._proposalID = newValue}
  }

  /// The address of the voter. The voter address must be part of the electorate
  /// in order to be allowed to vote.
  /// Warning: This field is optional and when not set it will default to any
  /// signer. It is recommended to always explicitely set the value of this
  /// field, as the signer order is not guaranteed.
  var voter: Data {
    get {return _storage._voter}
    set {_uniqueStorage()._voter = newValue}
  }

  /// Option for the vote. Must be Yes, No or Abstain for a valid vote.
  var selected: Gov_VoteOption {
    get {return _storage._selected}
    set {_uniqueStorage()._selected = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TallyMsg can be sent after the voting period has ended to do the final tally and trigger any state changes.
/// A final tally can be execute only once. A second submission will fail with an invalid state error.
struct Gov_TallyMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// ProposalID is UUID of the proposal to close.
  var proposalID: Data {
    get {return _storage._proposalID}
    set {_uniqueStorage()._proposalID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TextResolutionMsg is only intended to be dispatched internally from election
/// results. It adds a resolution to the list of "approved" resolutions,
/// with a reference to the electorate that approved it
struct Gov_CreateTextResolutionMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var resolution: String {
    get {return _storage._resolution}
    set {_uniqueStorage()._resolution = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Gov_UpdateElectorateMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// ElectorateID is the reference to the electorate that defines the group of possible voters.
  var electorateID: Data {
    get {return _storage._electorateID}
    set {_uniqueStorage()._electorateID = newValue}
  }

  /// DiffElectors contains the changes that should be applied. Adding an address should have a positive weight, removing
  /// with weight=0.
  var diffElectors: [Gov_Elector] {
    get {return _storage._diffElectors}
    set {_uniqueStorage()._diffElectors = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Gov_UpdateElectionRuleMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// ElectionRuleID is a reference to the election rule
  var electionRuleID: Data {
    get {return _storage._electionRuleID}
    set {_uniqueStorage()._electionRuleID = newValue}
  }

  /// Duration in seconds of how long the voting period will take place.
  var votingPeriod: UInt32 {
    get {return _storage._votingPeriod}
    set {_uniqueStorage()._votingPeriod = newValue}
  }

  /// Threshold is the fraction of all eligible voters, not only the ones who voted. To accept a
  /// proposal this value must be exceeded.
  /// The formula is `(yes*denominator) > (numerator*total_electors_weight)`.
  /// The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  /// of the eligible voters.
  var threshold: Gov_Fraction {
    get {return _storage._threshold ?? Gov_Fraction()}
    set {_uniqueStorage()._threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  var hasThreshold: Bool {return _storage._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  mutating func clearThreshold() {_uniqueStorage()._threshold = nil}

  /// The quorum fraction of eligible voters is based on the total electorate
  /// weight and defines a threshold of votes that must be exceeded before the
  /// acceptance threshold is applied. This value requires any kind of votes
  /// and not only YES.
  ///
  /// The valid range for the threshold value is `0.5` to `1` (inclusive) which
  /// allows any value between half and all of the eligible voters.
  var quorum: Gov_Fraction {
    get {return _storage._quorum ?? Gov_Fraction()}
    set {_uniqueStorage()._quorum = newValue}
  }
  /// Returns true if `quorum` has been explicitly set.
  var hasQuorum: Bool {return _storage._quorum != nil}
  /// Clears the value of `quorum`. Subsequent reads from it will return its default value.
  mutating func clearQuorum() {_uniqueStorage()._quorum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gov"

extension Gov_VoteOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOTE_OPTION_INVALID"),
    1: .same(proto: "VOTE_OPTION_YES"),
    2: .same(proto: "VOTE_OPTION_NO"),
    3: .same(proto: "VOTE_OPTION_ABSTAIN"),
  ]
}

extension Gov_Electorate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Electorate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "version"),
    3: .same(proto: "admin"),
    4: .same(proto: "title"),
    5: .same(proto: "electors"),
    6: .standard(proto: "total_electorate_weight"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _version: UInt32 = 0
    var _admin: Data = SwiftProtobuf.Internal.emptyData
    var _title: String = String()
    var _electors: [Gov_Elector] = []
    var _totalElectorateWeight: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _version = source._version
      _admin = source._admin
      _title = source._title
      _electors = source._electors
      _totalElectorateWeight = source._totalElectorateWeight
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._admin)
        case 4: try decoder.decodeSingularStringField(value: &_storage._title)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._electors)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._totalElectorateWeight)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 2)
      }
      if !_storage._admin.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._admin, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if !_storage._electors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._electors, fieldNumber: 5)
      }
      if _storage._totalElectorateWeight != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalElectorateWeight, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Electorate, rhs: Gov_Electorate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._admin != rhs_storage._admin {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._electors != rhs_storage._electors {return false}
        if _storage._totalElectorateWeight != rhs_storage._totalElectorateWeight {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_Elector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Elector"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.weight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt32Field(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Elector, rhs: Gov_Elector) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_ElectionRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ElectionRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "version"),
    3: .same(proto: "admin"),
    4: .standard(proto: "electorate_id"),
    5: .same(proto: "title"),
    6: .standard(proto: "voting_period"),
    7: .same(proto: "threshold"),
    8: .same(proto: "quorum"),
    9: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _version: UInt32 = 0
    var _admin: Data = SwiftProtobuf.Internal.emptyData
    var _electorateID: Data = SwiftProtobuf.Internal.emptyData
    var _title: String = String()
    var _votingPeriod: UInt32 = 0
    var _threshold: Gov_Fraction? = nil
    var _quorum: Gov_Fraction? = nil
    var _address: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _version = source._version
      _admin = source._admin
      _electorateID = source._electorateID
      _title = source._title
      _votingPeriod = source._votingPeriod
      _threshold = source._threshold
      _quorum = source._quorum
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._admin)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._electorateID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._title)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._votingPeriod)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._threshold)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._quorum)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 2)
      }
      if !_storage._admin.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._admin, fieldNumber: 3)
      }
      if !_storage._electorateID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._electorateID, fieldNumber: 4)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 5)
      }
      if _storage._votingPeriod != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._votingPeriod, fieldNumber: 6)
      }
      if let v = _storage._threshold {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._quorum {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._address, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_ElectionRule, rhs: Gov_ElectionRule) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._admin != rhs_storage._admin {return false}
        if _storage._electorateID != rhs_storage._electorateID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._votingPeriod != rhs_storage._votingPeriod {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        if _storage._quorum != rhs_storage._quorum {return false}
        if _storage._address != rhs_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_Fraction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Fraction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "numerator"),
    2: .same(proto: "denominator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.numerator)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.denominator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numerator != 0 {
      try visitor.visitSingularUInt32Field(value: self.numerator, fieldNumber: 1)
    }
    if self.denominator != 0 {
      try visitor.visitSingularUInt32Field(value: self.denominator, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Fraction, rhs: Gov_Fraction) -> Bool {
    if lhs.numerator != rhs.numerator {return false}
    if lhs.denominator != rhs.denominator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "title"),
    3: .standard(proto: "raw_option"),
    4: .same(proto: "description"),
    5: .standard(proto: "election_rule_ref"),
    6: .standard(proto: "electorate_ref"),
    7: .standard(proto: "voting_start_time"),
    8: .standard(proto: "voting_end_time"),
    9: .standard(proto: "submission_time"),
    10: .same(proto: "author"),
    11: .standard(proto: "vote_state"),
    12: .same(proto: "status"),
    13: .same(proto: "result"),
    14: .standard(proto: "executor_result"),
    15: .standard(proto: "tally_task_id"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _title: String = String()
    var _rawOption: Data = SwiftProtobuf.Internal.emptyData
    var _description_p: String = String()
    var _electionRuleRef: Orm_VersionedIDRef? = nil
    var _electorateRef: Orm_VersionedIDRef? = nil
    var _votingStartTime: Int64 = 0
    var _votingEndTime: Int64 = 0
    var _submissionTime: Int64 = 0
    var _author: Data = SwiftProtobuf.Internal.emptyData
    var _voteState: Gov_TallyResult? = nil
    var _status: Gov_Proposal.Status = .proposalStatusInvalid
    var _result: Gov_Proposal.Result = .proposalResultInvalid
    var _executorResult: Gov_Proposal.ExecutorResult = .proposalExecutorResultInvalid
    var _tallyTaskID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _title = source._title
      _rawOption = source._rawOption
      _description_p = source._description_p
      _electionRuleRef = source._electionRuleRef
      _electorateRef = source._electorateRef
      _votingStartTime = source._votingStartTime
      _votingEndTime = source._votingEndTime
      _submissionTime = source._submissionTime
      _author = source._author
      _voteState = source._voteState
      _status = source._status
      _result = source._result
      _executorResult = source._executorResult
      _tallyTaskID = source._tallyTaskID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._rawOption)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._electionRuleRef)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._electorateRef)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._votingStartTime)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._votingEndTime)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._submissionTime)
        case 10: try decoder.decodeSingularBytesField(value: &_storage._author)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._voteState)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._result)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._executorResult)
        case 15: try decoder.decodeSingularBytesField(value: &_storage._tallyTaskID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._rawOption.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._rawOption, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if let v = _storage._electionRuleRef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._electorateRef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._votingStartTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._votingStartTime, fieldNumber: 7)
      }
      if _storage._votingEndTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._votingEndTime, fieldNumber: 8)
      }
      if _storage._submissionTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._submissionTime, fieldNumber: 9)
      }
      if !_storage._author.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._author, fieldNumber: 10)
      }
      if let v = _storage._voteState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._status != .proposalStatusInvalid {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 12)
      }
      if _storage._result != .proposalResultInvalid {
        try visitor.visitSingularEnumField(value: _storage._result, fieldNumber: 13)
      }
      if _storage._executorResult != .proposalExecutorResultInvalid {
        try visitor.visitSingularEnumField(value: _storage._executorResult, fieldNumber: 14)
      }
      if !_storage._tallyTaskID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._tallyTaskID, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Proposal, rhs: Gov_Proposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._rawOption != rhs_storage._rawOption {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._electionRuleRef != rhs_storage._electionRuleRef {return false}
        if _storage._electorateRef != rhs_storage._electorateRef {return false}
        if _storage._votingStartTime != rhs_storage._votingStartTime {return false}
        if _storage._votingEndTime != rhs_storage._votingEndTime {return false}
        if _storage._submissionTime != rhs_storage._submissionTime {return false}
        if _storage._author != rhs_storage._author {return false}
        if _storage._voteState != rhs_storage._voteState {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._result != rhs_storage._result {return false}
        if _storage._executorResult != rhs_storage._executorResult {return false}
        if _storage._tallyTaskID != rhs_storage._tallyTaskID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_Proposal.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_STATUS_INVALID"),
    1: .same(proto: "PROPOSAL_STATUS_SUBMITTED"),
    2: .same(proto: "PROPOSAL_STATUS_CLOSED"),
    3: .same(proto: "PROPOSAL_STATUS_WITHDRAWN"),
  ]
}

extension Gov_Proposal.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_RESULT_INVALID"),
    1: .same(proto: "PROPOSAL_RESULT_UNDEFINED"),
    2: .same(proto: "PROPOSAL_RESULT_ACCEPTED"),
    3: .same(proto: "PROPOSAL_RESULT_REJECTED"),
  ]
}

extension Gov_Proposal.ExecutorResult: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_EXECUTOR_RESULT_INVALID"),
    1: .same(proto: "PROPOSAL_EXECUTOR_RESULT_NOT_RUN"),
    2: .same(proto: "PROPOSAL_EXECUTOR_RESULT_SUCCESS"),
    3: .same(proto: "PROPOSAL_EXECUTOR_RESULT_FAILURE"),
  ]
}

extension Gov_Resolution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Resolution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "proposal_id"),
    3: .standard(proto: "electorate_ref"),
    4: .same(proto: "resolution"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _proposalID: Data = SwiftProtobuf.Internal.emptyData
    var _electorateRef: Orm_VersionedIDRef? = nil
    var _resolution: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _proposalID = source._proposalID
      _electorateRef = source._electorateRef
      _resolution = source._resolution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._proposalID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._electorateRef)
        case 4: try decoder.decodeSingularStringField(value: &_storage._resolution)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._proposalID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._proposalID, fieldNumber: 2)
      }
      if let v = _storage._electorateRef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._resolution.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resolution, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Resolution, rhs: Gov_Resolution) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._proposalID != rhs_storage._proposalID {return false}
        if _storage._electorateRef != rhs_storage._electorateRef {return false}
        if _storage._resolution != rhs_storage._resolution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_TallyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_yes"),
    2: .standard(proto: "total_no"),
    3: .standard(proto: "total_abstain"),
    4: .standard(proto: "total_electorate_weight"),
    5: .same(proto: "quorum"),
    6: .same(proto: "threshold"),
  ]

  fileprivate class _StorageClass {
    var _totalYes: UInt64 = 0
    var _totalNo: UInt64 = 0
    var _totalAbstain: UInt64 = 0
    var _totalElectorateWeight: UInt64 = 0
    var _quorum: Gov_Fraction? = nil
    var _threshold: Gov_Fraction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _totalYes = source._totalYes
      _totalNo = source._totalNo
      _totalAbstain = source._totalAbstain
      _totalElectorateWeight = source._totalElectorateWeight
      _quorum = source._quorum
      _threshold = source._threshold
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._totalYes)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._totalNo)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._totalAbstain)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._totalElectorateWeight)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._quorum)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._threshold)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._totalYes != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalYes, fieldNumber: 1)
      }
      if _storage._totalNo != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalNo, fieldNumber: 2)
      }
      if _storage._totalAbstain != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalAbstain, fieldNumber: 3)
      }
      if _storage._totalElectorateWeight != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalElectorateWeight, fieldNumber: 4)
      }
      if let v = _storage._quorum {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._threshold {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_TallyResult, rhs: Gov_TallyResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._totalYes != rhs_storage._totalYes {return false}
        if _storage._totalNo != rhs_storage._totalNo {return false}
        if _storage._totalAbstain != rhs_storage._totalAbstain {return false}
        if _storage._totalElectorateWeight != rhs_storage._totalElectorateWeight {return false}
        if _storage._quorum != rhs_storage._quorum {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "elector"),
    3: .same(proto: "voted"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _elector: Gov_Elector? = nil
    var _voted: Gov_VoteOption = .invalid

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _elector = source._elector
      _voted = source._voted
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._elector)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._voted)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._elector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._voted != .invalid {
        try visitor.visitSingularEnumField(value: _storage._voted, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_Vote, rhs: Gov_Vote) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._elector != rhs_storage._elector {return false}
        if _storage._voted != rhs_storage._voted {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_CreateProposalMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateProposalMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "title"),
    3: .standard(proto: "raw_option"),
    4: .same(proto: "description"),
    5: .standard(proto: "election_rule_id"),
    6: .standard(proto: "start_time"),
    7: .same(proto: "author"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _title: String = String()
    var _rawOption: Data = SwiftProtobuf.Internal.emptyData
    var _description_p: String = String()
    var _electionRuleID: Data = SwiftProtobuf.Internal.emptyData
    var _startTime: Int64 = 0
    var _author: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _title = source._title
      _rawOption = source._rawOption
      _description_p = source._description_p
      _electionRuleID = source._electionRuleID
      _startTime = source._startTime
      _author = source._author
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._rawOption)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._electionRuleID)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._startTime)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._author)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._rawOption.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._rawOption, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if !_storage._electionRuleID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._electionRuleID, fieldNumber: 5)
      }
      if _storage._startTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTime, fieldNumber: 6)
      }
      if !_storage._author.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._author, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_CreateProposalMsg, rhs: Gov_CreateProposalMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._rawOption != rhs_storage._rawOption {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._electionRuleID != rhs_storage._electionRuleID {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._author != rhs_storage._author {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_DeleteProposalMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteProposalMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "proposal_id"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _proposalID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _proposalID = source._proposalID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._proposalID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._proposalID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._proposalID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_DeleteProposalMsg, rhs: Gov_DeleteProposalMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._proposalID != rhs_storage._proposalID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_VoteMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoteMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "proposal_id"),
    3: .same(proto: "voter"),
    4: .same(proto: "selected"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _proposalID: Data = SwiftProtobuf.Internal.emptyData
    var _voter: Data = SwiftProtobuf.Internal.emptyData
    var _selected: Gov_VoteOption = .invalid

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _proposalID = source._proposalID
      _voter = source._voter
      _selected = source._selected
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._proposalID)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._voter)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._selected)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._proposalID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._proposalID, fieldNumber: 2)
      }
      if !_storage._voter.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._voter, fieldNumber: 3)
      }
      if _storage._selected != .invalid {
        try visitor.visitSingularEnumField(value: _storage._selected, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_VoteMsg, rhs: Gov_VoteMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._proposalID != rhs_storage._proposalID {return false}
        if _storage._voter != rhs_storage._voter {return false}
        if _storage._selected != rhs_storage._selected {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_TallyMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "proposal_id"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _proposalID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _proposalID = source._proposalID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._proposalID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._proposalID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._proposalID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_TallyMsg, rhs: Gov_TallyMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._proposalID != rhs_storage._proposalID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_CreateTextResolutionMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateTextResolutionMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "resolution"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _resolution: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _resolution = source._resolution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularStringField(value: &_storage._resolution)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._resolution.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resolution, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_CreateTextResolutionMsg, rhs: Gov_CreateTextResolutionMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._resolution != rhs_storage._resolution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_UpdateElectorateMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateElectorateMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "electorate_id"),
    3: .standard(proto: "diff_electors"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _electorateID: Data = SwiftProtobuf.Internal.emptyData
    var _diffElectors: [Gov_Elector] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _electorateID = source._electorateID
      _diffElectors = source._diffElectors
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._electorateID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._diffElectors)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._electorateID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._electorateID, fieldNumber: 2)
      }
      if !_storage._diffElectors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._diffElectors, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_UpdateElectorateMsg, rhs: Gov_UpdateElectorateMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._electorateID != rhs_storage._electorateID {return false}
        if _storage._diffElectors != rhs_storage._diffElectors {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gov_UpdateElectionRuleMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateElectionRuleMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "election_rule_id"),
    3: .standard(proto: "voting_period"),
    4: .same(proto: "threshold"),
    5: .same(proto: "quorum"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _electionRuleID: Data = SwiftProtobuf.Internal.emptyData
    var _votingPeriod: UInt32 = 0
    var _threshold: Gov_Fraction? = nil
    var _quorum: Gov_Fraction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _electionRuleID = source._electionRuleID
      _votingPeriod = source._votingPeriod
      _threshold = source._threshold
      _quorum = source._quorum
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._electionRuleID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._votingPeriod)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._threshold)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._quorum)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._electionRuleID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._electionRuleID, fieldNumber: 2)
      }
      if _storage._votingPeriod != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._votingPeriod, fieldNumber: 3)
      }
      if let v = _storage._threshold {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._quorum {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_UpdateElectionRuleMsg, rhs: Gov_UpdateElectionRuleMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._electionRuleID != rhs_storage._electionRuleID {return false}
        if _storage._votingPeriod != rhs_storage._votingPeriod {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        if _storage._quorum != rhs_storage._quorum {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
