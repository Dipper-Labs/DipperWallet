// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/gov/sample_test.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ProposalOptions is a sum type of all possible messages that
/// may be dispatched via a governance proposal.
///
/// For the test case, we only refer to package-internal messages
/// and handlers, but an application can reference messages from any package.
struct Gov_ProposalOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var option: OneOf_Option? {
    get {return _storage._option}
    set {_uniqueStorage()._option = newValue}
  }

  var text: Gov_CreateTextResolutionMsg {
    get {
      if case .text(let v)? = _storage._option {return v}
      return Gov_CreateTextResolutionMsg()
    }
    set {_uniqueStorage()._option = .text(newValue)}
  }

  var electorate: Gov_UpdateElectorateMsg {
    get {
      if case .electorate(let v)? = _storage._option {return v}
      return Gov_UpdateElectorateMsg()
    }
    set {_uniqueStorage()._option = .electorate(newValue)}
  }

  var rule: Gov_UpdateElectionRuleMsg {
    get {
      if case .rule(let v)? = _storage._option {return v}
      return Gov_UpdateElectionRuleMsg()
    }
    set {_uniqueStorage()._option = .rule(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Option: Equatable {
    case text(Gov_CreateTextResolutionMsg)
    case electorate(Gov_UpdateElectorateMsg)
    case rule(Gov_UpdateElectionRuleMsg)

  #if !swift(>=4.1)
    static func ==(lhs: Gov_ProposalOptions.OneOf_Option, rhs: Gov_ProposalOptions.OneOf_Option) -> Bool {
      switch (lhs, rhs) {
      case (.text(let l), .text(let r)): return l == r
      case (.electorate(let l), .electorate(let r)): return l == r
      case (.rule(let l), .rule(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gov"

extension Gov_ProposalOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProposalOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "electorate"),
    3: .same(proto: "rule"),
  ]

  fileprivate class _StorageClass {
    var _option: Gov_ProposalOptions.OneOf_Option?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _option = source._option
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Gov_CreateTextResolutionMsg?
          if let current = _storage._option {
            try decoder.handleConflictingOneOf()
            if case .text(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._option = .text(v)}
        case 2:
          var v: Gov_UpdateElectorateMsg?
          if let current = _storage._option {
            try decoder.handleConflictingOneOf()
            if case .electorate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._option = .electorate(v)}
        case 3:
          var v: Gov_UpdateElectionRuleMsg?
          if let current = _storage._option {
            try decoder.handleConflictingOneOf()
            if case .rule(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._option = .rule(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._option {
      case .text(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .electorate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .rule(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gov_ProposalOptions, rhs: Gov_ProposalOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._option != rhs_storage._option {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
