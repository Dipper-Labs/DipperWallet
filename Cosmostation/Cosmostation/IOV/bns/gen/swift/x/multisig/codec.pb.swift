// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: x/multisig/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Multisig_Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Participants defines a list of all signatures that are allowed to sign the
  /// contract.
  var participants: [Multisig_Participant] {
    get {return _storage._participants}
    set {_uniqueStorage()._participants = newValue}
  }

  /// Activation threshold defines the minimal weight value that must be
  /// provided from participants in order to activate the contract. Weight is
  /// computed as the sum of weights of all participating signatures.
  var activationThreshold: UInt32 {
    get {return _storage._activationThreshold}
    set {_uniqueStorage()._activationThreshold = newValue}
  }

  /// Admin threshold defines the minimal weight value that must be provided
  /// from participants in order to administrate the contract. Weight is
  /// computed as the sum of weights of all participating signatures.
  var adminThreshold: UInt32 {
    get {return _storage._adminThreshold}
    set {_uniqueStorage()._adminThreshold = newValue}
  }

  /// Address of this entity. Set during creation and does not change.
  var address: Data {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Participant clubs together a signature with a weight. The greater the weight
/// the greater the power of a signature.
struct Multisig_Participant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signature: Data = SwiftProtobuf.Internal.emptyData

  var weight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Multisig_CreateMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var participants: [Multisig_Participant] {
    get {return _storage._participants}
    set {_uniqueStorage()._participants = newValue}
  }

  var activationThreshold: UInt32 {
    get {return _storage._activationThreshold}
    set {_uniqueStorage()._activationThreshold = newValue}
  }

  var adminThreshold: UInt32 {
    get {return _storage._adminThreshold}
    set {_uniqueStorage()._adminThreshold = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Multisig_UpdateMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var contractID: Data {
    get {return _storage._contractID}
    set {_uniqueStorage()._contractID = newValue}
  }

  var participants: [Multisig_Participant] {
    get {return _storage._participants}
    set {_uniqueStorage()._participants = newValue}
  }

  var activationThreshold: UInt32 {
    get {return _storage._activationThreshold}
    set {_uniqueStorage()._activationThreshold = newValue}
  }

  var adminThreshold: UInt32 {
    get {return _storage._adminThreshold}
    set {_uniqueStorage()._adminThreshold = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "multisig"

extension Multisig_Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contract"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "participants"),
    3: .standard(proto: "activation_threshold"),
    4: .standard(proto: "admin_threshold"),
    5: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _participants: [Multisig_Participant] = []
    var _activationThreshold: UInt32 = 0
    var _adminThreshold: UInt32 = 0
    var _address: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _participants = source._participants
      _activationThreshold = source._activationThreshold
      _adminThreshold = source._adminThreshold
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._participants)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._activationThreshold)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._adminThreshold)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._participants.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._participants, fieldNumber: 2)
      }
      if _storage._activationThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._activationThreshold, fieldNumber: 3)
      }
      if _storage._adminThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._adminThreshold, fieldNumber: 4)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._address, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Multisig_Contract, rhs: Multisig_Contract) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._participants != rhs_storage._participants {return false}
        if _storage._activationThreshold != rhs_storage._activationThreshold {return false}
        if _storage._adminThreshold != rhs_storage._adminThreshold {return false}
        if _storage._address != rhs_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Multisig_Participant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Participant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signature)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.weight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt32Field(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Multisig_Participant, rhs: Multisig_Participant) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Multisig_CreateMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "participants"),
    3: .standard(proto: "activation_threshold"),
    4: .standard(proto: "admin_threshold"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _participants: [Multisig_Participant] = []
    var _activationThreshold: UInt32 = 0
    var _adminThreshold: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _participants = source._participants
      _activationThreshold = source._activationThreshold
      _adminThreshold = source._adminThreshold
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._participants)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._activationThreshold)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._adminThreshold)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._participants.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._participants, fieldNumber: 2)
      }
      if _storage._activationThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._activationThreshold, fieldNumber: 3)
      }
      if _storage._adminThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._adminThreshold, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Multisig_CreateMsg, rhs: Multisig_CreateMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._participants != rhs_storage._participants {return false}
        if _storage._activationThreshold != rhs_storage._activationThreshold {return false}
        if _storage._adminThreshold != rhs_storage._adminThreshold {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Multisig_UpdateMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .standard(proto: "contract_id"),
    3: .same(proto: "participants"),
    4: .standard(proto: "activation_threshold"),
    5: .standard(proto: "admin_threshold"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _contractID: Data = SwiftProtobuf.Internal.emptyData
    var _participants: [Multisig_Participant] = []
    var _activationThreshold: UInt32 = 0
    var _adminThreshold: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _contractID = source._contractID
      _participants = source._participants
      _activationThreshold = source._activationThreshold
      _adminThreshold = source._adminThreshold
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._contractID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._participants)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._activationThreshold)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._adminThreshold)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._contractID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._contractID, fieldNumber: 2)
      }
      if !_storage._participants.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._participants, fieldNumber: 3)
      }
      if _storage._activationThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._activationThreshold, fieldNumber: 4)
      }
      if _storage._adminThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._adminThreshold, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Multisig_UpdateMsg, rhs: Multisig_UpdateMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._contractID != rhs_storage._contractID {return false}
        if _storage._participants != rhs_storage._participants {return false}
        if _storage._activationThreshold != rhs_storage._activationThreshold {return false}
        if _storage._adminThreshold != rhs_storage._adminThreshold {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
