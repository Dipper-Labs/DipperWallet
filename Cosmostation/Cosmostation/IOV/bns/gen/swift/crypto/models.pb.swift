// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Crypto_PublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pub: Crypto_PublicKey.OneOf_Pub? = nil

  var ed25519: Data {
    get {
      if case .ed25519(let v)? = pub {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {pub = .ed25519(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Pub: Equatable {
    case ed25519(Data)

  #if !swift(>=4.1)
    static func ==(lhs: Crypto_PublicKey.OneOf_Pub, rhs: Crypto_PublicKey.OneOf_Pub) -> Bool {
      switch (lhs, rhs) {
      case (.ed25519(let l), .ed25519(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct Crypto_PrivateKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var priv: Crypto_PrivateKey.OneOf_Priv? = nil

  var ed25519: Data {
    get {
      if case .ed25519(let v)? = priv {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {priv = .ed25519(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Priv: Equatable {
    case ed25519(Data)

  #if !swift(>=4.1)
    static func ==(lhs: Crypto_PrivateKey.OneOf_Priv, rhs: Crypto_PrivateKey.OneOf_Priv) -> Bool {
      switch (lhs, rhs) {
      case (.ed25519(let l), .ed25519(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct Crypto_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sig: Crypto_Signature.OneOf_Sig? = nil

  var ed25519: Data {
    get {
      if case .ed25519(let v)? = sig {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {sig = .ed25519(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Sig: Equatable {
    case ed25519(Data)

  #if !swift(>=4.1)
    static func ==(lhs: Crypto_Signature.OneOf_Sig, rhs: Crypto_Signature.OneOf_Sig) -> Bool {
      switch (lhs, rhs) {
      case (.ed25519(let l), .ed25519(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crypto"

extension Crypto_PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ed25519"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.pub != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.pub = .ed25519(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .ed25519(let v)? = self.pub {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crypto_PublicKey, rhs: Crypto_PublicKey) -> Bool {
    if lhs.pub != rhs.pub {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crypto_PrivateKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrivateKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ed25519"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.priv != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.priv = .ed25519(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .ed25519(let v)? = self.priv {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crypto_PrivateKey, rhs: Crypto_PrivateKey) -> Bool {
    if lhs.priv != rhs.priv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crypto_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Signature"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ed25519"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.sig != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.sig = .ed25519(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .ed25519(let v)? = self.sig {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crypto_Signature, rhs: Crypto_Signature) -> Bool {
    if lhs.sig != rhs.sig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
