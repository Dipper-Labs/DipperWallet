// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: coin/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Coin can hold any amount between -1 billion and +1 billion
/// at steps of 10^-9. It is a fixed-point decimal
/// representation and uses integers to avoid rounding
/// associated with floats.
///
/// Every code has a denomination, which is just a
///
/// If you want anything more complex, you should write your
/// own type, possibly borrowing from this code.
struct Coin_Coin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whole coins, -10^15 < integer < 10^15
  var whole: Int64 = 0

  /// Billionth of coins. 0 <= abs(fractional) < 10^9
  /// If fractional != 0, must have same sign as integer
  var fractional: Int64 = 0

  /// Ticker is 3-4 upper-case letters and
  /// all Coins of the same currency can be combined
  var ticker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "coin"

extension Coin_Coin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Coin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "whole"),
    2: .same(proto: "fractional"),
    3: .same(proto: "ticker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.whole)
      case 2: try decoder.decodeSingularInt64Field(value: &self.fractional)
      case 3: try decoder.decodeSingularStringField(value: &self.ticker)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.whole != 0 {
      try visitor.visitSingularInt64Field(value: self.whole, fieldNumber: 1)
    }
    if self.fractional != 0 {
      try visitor.visitSingularInt64Field(value: self.fractional, fieldNumber: 2)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Coin_Coin, rhs: Coin_Coin) -> Bool {
    if lhs.whole != rhs.whole {return false}
    if lhs.fractional != rhs.fractional {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
