// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cmd/bnsd/x/qualityscore/codec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Qualityscore_Configuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Owner is present to implement gconf.OwnedConfig interface
  /// This defines the Address that is allowed to update the Configuration object and is
  /// needed to make use of gconf.NewUpdateConfigurationHandler
  var owner: Data {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var c: Weave_Fraction {
    get {return _storage._c ?? Weave_Fraction()}
    set {_uniqueStorage()._c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool {return _storage._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() {_uniqueStorage()._c = nil}

  var k: Weave_Fraction {
    get {return _storage._k ?? Weave_Fraction()}
    set {_uniqueStorage()._k = newValue}
  }
  /// Returns true if `k` has been explicitly set.
  var hasK: Bool {return _storage._k != nil}
  /// Clears the value of `k`. Subsequent reads from it will return its default value.
  mutating func clearK() {_uniqueStorage()._k = nil}

  var kp: Weave_Fraction {
    get {return _storage._kp ?? Weave_Fraction()}
    set {_uniqueStorage()._kp = newValue}
  }
  /// Returns true if `kp` has been explicitly set.
  var hasKp: Bool {return _storage._kp != nil}
  /// Clears the value of `kp`. Subsequent reads from it will return its default value.
  mutating func clearKp() {_uniqueStorage()._kp = nil}

  var q0: Weave_Fraction {
    get {return _storage._q0 ?? Weave_Fraction()}
    set {_uniqueStorage()._q0 = newValue}
  }
  /// Returns true if `q0` has been explicitly set.
  var hasQ0: Bool {return _storage._q0 != nil}
  /// Clears the value of `q0`. Subsequent reads from it will return its default value.
  mutating func clearQ0() {_uniqueStorage()._q0 = nil}

  var x: Weave_Fraction {
    get {return _storage._x ?? Weave_Fraction()}
    set {_uniqueStorage()._x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return _storage._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {_uniqueStorage()._x = nil}

  var xInf: Weave_Fraction {
    get {return _storage._xInf ?? Weave_Fraction()}
    set {_uniqueStorage()._xInf = newValue}
  }
  /// Returns true if `xInf` has been explicitly set.
  var hasXInf: Bool {return _storage._xInf != nil}
  /// Clears the value of `xInf`. Subsequent reads from it will return its default value.
  mutating func clearXInf() {_uniqueStorage()._xInf = nil}

  var xSup: Weave_Fraction {
    get {return _storage._xSup ?? Weave_Fraction()}
    set {_uniqueStorage()._xSup = newValue}
  }
  /// Returns true if `xSup` has been explicitly set.
  var hasXSup: Bool {return _storage._xSup != nil}
  /// Clears the value of `xSup`. Subsequent reads from it will return its default value.
  mutating func clearXSup() {_uniqueStorage()._xSup = nil}

  var delta: Weave_Fraction {
    get {return _storage._delta ?? Weave_Fraction()}
    set {_uniqueStorage()._delta = newValue}
  }
  /// Returns true if `delta` has been explicitly set.
  var hasDelta: Bool {return _storage._delta != nil}
  /// Clears the value of `delta`. Subsequent reads from it will return its default value.
  mutating func clearDelta() {_uniqueStorage()._delta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// UpdateConfigurationMsg is used by the gconf extension to update the
/// configuration.
struct Qualityscore_UpdateConfigurationMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Weave_Metadata {
    get {return _storage._metadata ?? Weave_Metadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var patch: Qualityscore_Configuration {
    get {return _storage._patch ?? Qualityscore_Configuration()}
    set {_uniqueStorage()._patch = newValue}
  }
  /// Returns true if `patch` has been explicitly set.
  var hasPatch: Bool {return _storage._patch != nil}
  /// Clears the value of `patch`. Subsequent reads from it will return its default value.
  mutating func clearPatch() {_uniqueStorage()._patch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qualityscore"

extension Qualityscore_Configuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Configuration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "owner"),
    3: .same(proto: "c"),
    4: .same(proto: "k"),
    5: .same(proto: "kp"),
    6: .same(proto: "q0"),
    7: .same(proto: "x"),
    8: .standard(proto: "x_inf"),
    9: .standard(proto: "x_sup"),
    10: .same(proto: "delta"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _owner: Data = SwiftProtobuf.Internal.emptyData
    var _c: Weave_Fraction? = nil
    var _k: Weave_Fraction? = nil
    var _kp: Weave_Fraction? = nil
    var _q0: Weave_Fraction? = nil
    var _x: Weave_Fraction? = nil
    var _xInf: Weave_Fraction? = nil
    var _xSup: Weave_Fraction? = nil
    var _delta: Weave_Fraction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _owner = source._owner
      _c = source._c
      _k = source._k
      _kp = source._kp
      _q0 = source._q0
      _x = source._x
      _xInf = source._xInf
      _xSup = source._xSup
      _delta = source._delta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._owner)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._c)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._k)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._kp)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._q0)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._x)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._xInf)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._xSup)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._delta)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._owner, fieldNumber: 2)
      }
      if let v = _storage._c {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._k {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._kp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._q0 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._x {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._xInf {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._xSup {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._delta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qualityscore_Configuration, rhs: Qualityscore_Configuration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._c != rhs_storage._c {return false}
        if _storage._k != rhs_storage._k {return false}
        if _storage._kp != rhs_storage._kp {return false}
        if _storage._q0 != rhs_storage._q0 {return false}
        if _storage._x != rhs_storage._x {return false}
        if _storage._xInf != rhs_storage._xInf {return false}
        if _storage._xSup != rhs_storage._xSup {return false}
        if _storage._delta != rhs_storage._delta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qualityscore_UpdateConfigurationMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateConfigurationMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "patch"),
  ]

  fileprivate class _StorageClass {
    var _metadata: Weave_Metadata? = nil
    var _patch: Qualityscore_Configuration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _patch = source._patch
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._patch)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._patch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qualityscore_UpdateConfigurationMsg, rhs: Qualityscore_UpdateConfigurationMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._patch != rhs_storage._patch {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
